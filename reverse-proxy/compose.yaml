services:
  traefik:
    image: traefik
    container_name: traefik
    profiles:
      - reverse-proxy
      - traefik
    environment:
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN:?}
    command:
      - --global.sendAnonymousUsage=true

      - --log.level=DEBUG
      - --log.filePath=/logs/traefik.log

      - --accessLog.filePath=/logs/access.log

      - --api.dashboard=true

      - --providers.docker.endpoint=tcp://docker-socket-proxy:2375
      - --providers.docker.exposedByDefault=false

      - --entryPoints.web.address=:80
      - --entryPoints.web.http.redirections.entryPoint.to=websecure
      - --entryPoints.web.http.redirections.entryPoint.scheme=https
      - --entryPoints.web.http.redirections.entryPoint.permanent=true
      - --entryPoints.websecure.address=:443
      - --entryPoints.websecure.http.tls.certResolver=dns-cloudflare
      - --entryPoints.websecure.http.tls.domains[0].main=${DOMAIN:?}
      - --entryPoints.websecure.http.tls.domains[0].sans=*.${DOMAIN:?}

      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delaybeforecheck=10
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      # Staging CA
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.dns-cloudflare.acme.storage=/letsencrypt/acme.json
    volumes:
      - type: bind
        source: "${APP_DATA_PATH:?}/traefik/letsencrypt"
        target: /letsencrypt
      - type: bind
        source: "${APP_LOG_PATH:?}/traefik"
        target: /logs
    ports:
      - 80:80
      - 443:443
      # - 8080:8080
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - reverse-proxy
      - docker-socket-proxy
      - wireguard
      - adguardhome
      # - watchtower
      - homepage
      - immich
      - paperless-ngx
      - speedtest-tracker
      - miniflux
      - filebrowser
      - streaming
      - mealie
      - stirling-pdf
      - microbin
      - wger
      - monica
    depends_on:
      - docker-socket-proxy
    labels:
      com.centurylinklabs.watchtower.enable: true
      traefik.enable: true
      traefik.http.middlewares.ip-allowlist.ipAllowList.sourceRange: ${IP_ALLOWLIST:?}
      traefik.http.routers.dashboard.rule: Host(`traefik.${DOMAIN:?}`)
      traefik.http.routers.dashboard.entryPoints: websecure
      traefik.http.routers.dashboard.service: api@internal
      traefik.http.routers.dashboard.middlewares: ip-allowlist@docker
    restart: unless-stopped

  docker-socket-proxy:
    image: tecnativa/docker-socket-proxy
    container_name: docker-socket-proxy
    profiles:
      - docker-socket-proxy
      - reverse-proxy
    environment:
      CONTAINERS: 1
      INFO: 1
      IMAGES: 1
      VOLUMES: 1
      NETWORKS: 1
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    networks:
      - docker-socket-proxy
    labels:
      com.centurylinklabs.watchtower.enable: true
    restart: unless-stopped

  cloudflare-ddns:
    image: favonia/cloudflare-ddns:latest
    container_name: cloudflare-ddns
    profiles:
      - ddns
      - reverse-proxy
    read_only: true
    cap_drop: [all]
    security_opt: [no-new-privileges:true]
    user: "${PUID:?}:${PGID:?}"
    environment:
      CF_API_TOKEN: ${CF_DNS_API_TOKEN:?}
      DOMAINS: ${DOMAIN}
      PROXIED: true
    network_mode: host
    labels:
      com.centurylinklabs.watchtower.enable: true
    restart: unless-stopped

networks:
  reverse-proxy:
    name: reverse-proxy
  docker-socket-proxy:
    name: docker-socket-proxy
